<facelet-taglib version="2.2"
                xmlns="http://xmlns.jcp.org/xml/ns/javaee"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-facelettaglibrary_2_2.xsd">
    <namespace>http://foundation.zurb.com/faces</namespace>
    <tag>
        <tag-name>panel</tag-name>
        <description>Renders a foundation panel</description>
        <component>
            <component-type>
                org.foundationfaces.component.Panel
            </component-type>
            <renderer-type>
                org.foundationfaces.component.renderer.PanelRenderer
            </renderer-type>
        </component>
        <attribute>
            <description><![CDATA[The header of the panel. Can also use the facet "header" for more verbose headings. ]]></description>
            <name>header</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The style of the panel.]]></description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The style class of the panel.]]></description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>joyride</tag-name>
        <description>Renders a joyride panel</description>
        <component>
            <component-type>
                org.foundationfaces.component.Joyride
            </component-type>
            <renderer-type>
                org.foundationfaces.component.renderer.JoyrideRenderer
            </renderer-type>
        </component>
    </tag>
    <tag>
        <tag-name>joyrideStop</tag-name>
        <description>Renders a single foundation joyride stop</description>
        <component>
            <component-type>
                org.foundationfaces.component.JoyrideStop
            </component-type>
            <renderer-type>
                org.foundationfaces.component.renderer.JoyrideStopRenderer
            </renderer-type>
        </component>
        <attribute>
            <description><![CDATA[The id of the component to stop at]]></description>
            <name>dataId</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The label of the proceed button]]></description>
            <name>dataButton</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The label of the prev. button]]></description>
            <name>dataPrevText</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[?]]></description>
            <name>dataText</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The class of the stop?]]></description>
            <name>dataClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[turn on or off the expose feature]]></description>
            <name>expose</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Whether to cover page with modal during the tour]]></description>
            <name>modal</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[enable left, right and esc keystrokes]]></description>
            <name>keyboard</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA['top' or 'bottom' in relation to parent]]></description>
            <name>tipLocation</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[override on a per tooltip bases]]></description>
            <name>nubPosition</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Page scrolling speed in milliseconds, 0 = no scroll animation]]></description>
            <name>scrollSpeed</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[supports 'swing' and 'linear', extend with jQuery UI.]]></description>
            <name>scrollAnimation</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[0 = no timer , all other numbers = timer in milliseconds]]></description>
            <name>timer</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[true or false - true requires clicking the first button start the timer]]></description>
            <name>startTimerOnClick</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The index of the tooltip you want to start on (index of the li)]]></description>
            <name>startOffset</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[true or false to control whether a next button is used]]></description>
            <name>nextButton</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[true or false to control whether a prev button is used]]></description>
            <name>prevButton</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA['pop' or 'fade' in each tip]]></description>
            <name>tipAnimation</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[when tipAnimation = 'fade' this is speed in milliseconds for the transition]]></description>
            <name>tipAnimationFadeSpeed</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[true or false to control whether cookies are used]]></description>
            <name>cookieMonster</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Name the cookie you'll use]]></description>
            <name>cookieName</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Will this cookie be attached to a domain, ie. '.notableapp.com']]></description>
            <name>cookieDomain</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[set when you would like the cookie to expire.]]></description>
            <name>cookieExpires</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Where will the tip be attached]]></description>
            <name>tipContainer</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>

    </tag>
    <tag>
        <tag-name>offCanvas</tag-name>
        <description>Renders a foundation offcanvas menu</description>
        <component>
            <component-type>
                org.foundationfaces.component.OffCanvas
            </component-type>
            <renderer-type>
                org.foundationfaces.component.renderer.OffCanvasRenderer
            </renderer-type>
        </component>
        <attribute>
            <description><![CDATA[The style of the panel.]]></description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The style class of the panel.]]></description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>offCanvasButton</tag-name>
        <description>Renders a foundation offcanvas toggle menu button</description>
        <component>
            <component-type>
                org.foundationfaces.component.OffCanvasButton
            </component-type>
            <renderer-type>
                org.foundationfaces.component.renderer.OffCanvasButtonRenderer
            </renderer-type>
        </component>
        <attribute>
            <description><![CDATA[The style of the panel.]]></description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The style class of the panel.]]></description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The side of the off canvas menu where the button will appear.]]></description>
            <name>side</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>revealModal</tag-name>
        <description>Renders a foundation Reveal Modal</description>
        <component>
            <component-type>
                org.foundationfaces.component.RevealModal
            </component-type>
            <renderer-type>
                org.foundationfaces.component.renderer.RevealModalRenderer
            </renderer-type>
        </component>
        <attribute>
            <description><![CDATA[The header of the modal. Can also use the facet "header" for more verbose headings. ]]></description>
            <name>header</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The style of the modal.]]></description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The style class of the modal.]]></description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The id of the panel as exposed to foundation. This id is required.]]></description>
            <name>dataRevealId</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>  
    <tag>
        <tag-name>revealModalButton</tag-name>
        <description>Renders a foundation Reveal Modal Button</description>
        <component>
            <component-type>
                org.foundationfaces.component.RevealModalButton
            </component-type>
            <renderer-type>
                org.foundationfaces.component.renderer.RevealModalButtonRenderer
            </renderer-type>
        </component>
        <attribute>
            <description><![CDATA[The style of the modal.]]></description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The style class of the modal.]]></description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The label of the button]]></description>
            <name>label</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The id of the panel to close. This id is required.]]></description>
            <name>dataRevealId</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
    </tag> 
    <tag>
        <tag-name>commandButton</tag-name>
        <description>Renders a foundation Command Button</description>
        <component>
            <component-type>
                org.foundationfaces.component.CommandButton
            </component-type>
            <renderer-type>
                org.foundationfaces.component.renderer.CommandButtonRenderer
            </renderer-type>
        </component>
    </tag>   
    <tag>
        <tag-name>switch</tag-name>
        <description>Renders a foundation switch (select boolean)</description>
        <component>
            <component-type>
                org.foundationfaces.component.SelectBoolean
            </component-type>
            <renderer-type>
                org.foundationfaces.component.renderer.SelectBooleanRenderer
            </renderer-type>
        </component>
    </tag> 
    <tag>
        <tag-name>radio</tag-name>
        <description>Renders a foundation radio switch (select radio)</description>
        <component>
            <component-type>
                org.foundationfaces.component.SelectRadio
            </component-type>
            <renderer-type>
                org.foundationfaces.component.renderer.SelectRadioRenderer
            </renderer-type>
        </component>
    </tag>                                          
</facelet-taglib>